/*
    This file is part of the BeeNuked engine.
    Copyright (C) 2022 BueniaDev.

    BeeNuked is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BeeNuked is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BeeNuked.  If not, see <https://www.gnu.org/licenses/>.
*/

// Instrument patches (derived from external MAME ROMs)

// YM2413 (OPLL)
opll_patch ym2413_instruments =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0 (User)
    0x71, 0x61, 0x1E, 0x17, 0xD0, 0x78, 0x00, 0x17, // 1 (Violin)
    0x13, 0x41, 0x1A, 0x0D, 0xD8, 0xF7, 0x23, 0x13, // 2 (Guitar)
    0x13, 0x01, 0x99, 0x00, 0xF2, 0xC4, 0x11, 0x23, // 3 (Piano)
    0x31, 0x61, 0x0E, 0x07, 0xA8, 0x64, 0x70, 0x27, // 4 (Flute)
    0x32, 0x21, 0x1E, 0x06, 0xE0, 0x76, 0x00, 0x28, // 5 (Clarinet)
    0x31, 0x22, 0x16, 0x05, 0xE0, 0x71, 0x00, 0x18, // 6 (Oboe)
    0x21, 0x61, 0x1D, 0x07, 0x82, 0x81, 0x10, 0x07, // 7 (Trumpet)
    0x23, 0x21, 0x2D, 0x14, 0xA2, 0x72, 0x00, 0x07, // 8 (Organ)
    0x61, 0x61, 0x1B, 0x06, 0x64, 0x65, 0x10, 0x17, // 9 (Horn)
    0x41, 0x61, 0x0B, 0x18, 0x85, 0xF7, 0x71, 0x07, // 10 (Synthesizer)
    0x13, 0x01, 0x83, 0x11, 0xFA, 0xE4, 0x10, 0x04, // 11 (Harpsichord)
    0x17, 0xC1, 0x24, 0x07, 0xF8, 0xF8, 0x22, 0x12, // 12 (Vibraphone)
    0x61, 0x50, 0x0C, 0x05, 0xC2, 0xF5, 0x20, 0x42, // 13 (Synthesizer Bass)
    0x01, 0x01, 0x55, 0x03, 0xC9, 0x95, 0x03, 0x02, // 14 (Acoustic Bass)
    0x61, 0x41, 0x89, 0x03, 0xF1, 0xE4, 0x40, 0x13, // 15 (Electric Guitar)
    0x01, 0x01, 0x18, 0x0F, 0xDF, 0xF8, 0x6A, 0x6D, // R (Bass Drum)
    0x01, 0x01, 0x00, 0x00, 0xC8, 0xD8, 0xA7, 0x48, // R (High-Hat (M) / Snare Drum (C))
    0x05, 0x01, 0x00, 0x00, 0xF8, 0xAA, 0x59, 0x55, // R (Tom-tom (M)/ Top Cymbal (C))
};

// Konami VRC7 (DS1001)
opll_patch vrc7_instruments =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0 (User)
    0x03, 0x21, 0x05, 0x06, 0xE8, 0x81, 0x42, 0x27, // 1 (Buzzy Bell)
    0x13, 0x41, 0x14, 0x0D, 0xD8, 0xF6, 0x23, 0x12, // 2 (Guitar)
    0x11, 0x11, 0x08, 0x08, 0xFA, 0xB2, 0x20, 0x12, // 3 (Wurly)
    0x31, 0x61, 0x0C, 0x07, 0xA8, 0x64, 0x61, 0x27, // 4 (Flute)
    0x32, 0x21, 0x1E, 0x06, 0xE1, 0x76, 0x01, 0x28, // 5 (Clarinet)
    0x02, 0x01, 0x06, 0x00, 0xA3, 0xE2, 0xF4, 0xF4, // 6 (Synth)
    0x21, 0x61, 0x1D, 0x07, 0x82, 0x81, 0x11, 0x07, // 7 (Trumpet)
    0x23, 0x21, 0x22, 0x17, 0xA2, 0x72, 0x01, 0x17, // 8 (Organ)
    0x35, 0x11, 0x25, 0x00, 0x40, 0x73, 0x72, 0x01, // 9 (Bells)
    0xB5, 0x01, 0x0F, 0x0F, 0xA8, 0xA5, 0x51, 0x02, // 10 (Vibes)
    0x17, 0xC1, 0x24, 0x07, 0xF8, 0xF8, 0x22, 0x12, // 11 (Vibraphone)
    0x71, 0x23, 0x11, 0x06, 0x65, 0x74, 0x18, 0x16, // 12 (Tutti)
    0x01, 0x02, 0xD3, 0x05, 0xC9, 0x95, 0x03, 0x02, // 13 (Fretless)
    0x61, 0x63, 0x0C, 0x00, 0x94, 0xC0, 0x33, 0xF6, // 14 (Synth Bass)
    0x21, 0x72, 0x0D, 0x00, 0xC1, 0xD5, 0x56, 0x06, // 15 (Sweep)
    0x01, 0x01, 0x18, 0x0F, 0xDF, 0xF8, 0x6A, 0x6D, // R (Bass Drum)
    0x01, 0x01, 0x00, 0x00, 0xC8, 0xD8, 0xA7, 0x68, // R (High-Hat (M) / Snare Drum (C))
    0x05, 0x01, 0x00, 0x00, 0xF8, 0xAA, 0x59, 0x55, // R (Tom-tom (M)/ Top Cymbal (C))
};

// YM2423 (OPLL-X)
opll_patch ym2423_instruments =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0 (User)
    0x61, 0x61, 0x1B, 0x07, 0x94, 0x54, 0x10, 0x05, // 1 (Strings)
    0xB3, 0xB1, 0x52, 0x04, 0xF3, 0xF2, 0xA0, 0xE9, // 2 (Guitar)
    0x61, 0x21, 0x11, 0x85, 0xF2, 0xF2, 0x50, 0x75, // 3 (Electric Guitar)
    0xB3, 0xB2, 0x28, 0x07, 0xF3, 0xF2, 0x90, 0xB4, // 4 (Electric Piano 2)
    0x72, 0x31, 0x97, 0x05, 0x51, 0x6F, 0x70, 0x09, // 5 (Flute)
    0x33, 0x30, 0x18, 0x06, 0xF7, 0xF4, 0x50, 0x85, // 6 (Marimba)
    0x71, 0x31, 0x1C, 0x07, 0x51, 0x71, 0x20, 0x26, // 7 (Trumpet)
    0x71, 0xF4, 0x1B, 0x07, 0x73, 0x3F, 0x00, 0x06, // 8 (Harmonica)
    0x70, 0x30, 0x4D, 0x03, 0x42, 0x6F, 0x20, 0x06, // 9 (Tuba)
    0x60, 0x20, 0x10, 0x85, 0xF3, 0xF3, 0x20, 0x04, // 10 (Synth Brass 2)
    0x61, 0x61, 0x1B, 0x07, 0xC5, 0x96, 0xF0, 0xF6, // 11 (Short Saw)
    0xF9, 0xF1, 0xDB, 0x00, 0xF5, 0xF3, 0x70, 0xF2, // 12 (Vibraphone)
    0x60, 0xA2, 0x91, 0x03, 0x94, 0xB1, 0xE0, 0xF7, // 13 (Electric Guitar 2)
    0x30, 0x30, 0x17, 0x06, 0xD3, 0xE1, 0xB0, 0xEB, // 14 (Synth Bass 2)
    0x31, 0x36, 0x0D, 0x05, 0xF2, 0xF4, 0x20, 0x99, // 15 (Sitar)
    0x01, 0x01, 0x18, 0x0F, 0xDF, 0xF8, 0x6A, 0x6D, // R (Bass Drum)
    0x01, 0x01, 0x00, 0x00, 0xC8, 0xD8, 0xA7, 0x48, // R (High-Hat (M) / Snare Drum (C))
    0x05, 0x01, 0x00, 0x00, 0xF8, 0xAA, 0x59, 0x55, // R (Tom-tom (M)/ Top Cymbal (C))
};

// YMF281 (OPLL-P)
opll_patch ymf281_instruments =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0 (User)
    0x62, 0x21, 0x1A, 0x07, 0xFF, 0x67, 0x00, 0x16, // 1 (Electric String)
    0x20, 0x10, 0x45, 0x01, 0xF6, 0x83, 0x80, 0x03, // 2 (Bow wow)
    0x13, 0x01, 0x96, 0x00, 0xF2, 0xD3, 0x11, 0x03, // 3 (Electric Guitar)
    0x31, 0x61, 0x0B, 0x0F, 0xA8, 0x64, 0x70, 0x17, // 4 (Organ)
    0x32, 0x21, 0x1E, 0x06, 0xE1, 0x76, 0x00, 0x28, // 5 (Clarinet)
    0x20, 0x61, 0x82, 0x0E, 0x9A, 0x61, 0x20, 0x27, // 6 (Saxophone)
    0x21, 0x61, 0x1B, 0x07, 0x84, 0x83, 0x10, 0x07, // 7 (Trumpet)
    0x37, 0x32, 0xCA, 0x02, 0x66, 0x64, 0x40, 0x27, // 8 (Street Organ)
    0x41, 0x61, 0x07, 0x03, 0xC5, 0x77, 0x51, 0x07, // 9 (Synth Brass)
    0x36, 0x01, 0x5E, 0x07, 0xF2, 0xF3, 0xF0, 0xF3, // 10 (Electric Piano)
    0x20, 0x00, 0x18, 0x06, 0xF5, 0xE3, 0x20, 0x13, // 11 (Bass)
    0x17, 0x81, 0x24, 0x07, 0xF8, 0xF8, 0x22, 0x03, // 12 (Vibraphone)
    0x35, 0x64, 0x00, 0x00, 0xFF, 0xF3, 0x70, 0xF5, // 13 (Chime)
    0x0F, 0x31, 0x03, 0x07, 0xFC, 0xE3, 0x3F, 0xFC, // 14 (Tom Tom II)
    0x2A, 0x21, 0x00, 0x07, 0xBF, 0x84, 0x00, 0xF5, // 15 (Noise)
    0x01, 0x01, 0x18, 0x0F, 0xDF, 0xF8, 0x6A, 0x6D, // R (Bass Drum)
    0x01, 0x01, 0x00, 0x00, 0xC8, 0xD8, 0xA7, 0x48, // R (High-Hat (M) / Snare Drum (C))
    0x05, 0x01, 0x00, 0x00, 0xF8, 0xAA, 0x59, 0x55, // R (Tom-tom (M)/ Top Cymbal (C))
};

// Multiply table
array<int, 16> mul_table = 
{
     1,  2,  4,  6,
     8, 10, 12, 14,
    16, 18, 20, 20,
    24, 24, 30, 30
};

// Key-scale level table
array<int, 16> ksl_table = 
{
    112, 64, 48, 38,
     32, 26, 22, 18,
     16, 12, 10,  8,
      6,  4,  2,  0
};

// Table for counter shift values (verified on real hardware)
array<uint8_t, 64> counter_shift_table =
{
    13, 13, 13, 13,
    12, 12, 12, 12,
    11, 11, 11, 11, 
    10, 10, 10, 10,
     9,  9,  9,  9,
     8,  8,  8,  8,
     7,  7,  7,  7,
     6,  6,  6,  6,
     5,  5,  5,  5,
     4,  4,  4,  4,
     3,  3,  3,  3,
     2,  2,  2,  2,
     1,  1,  1,  1,
     0,  0,  0,  0,
     0,  0,  0,  0,
     0,  0,  0,  0
};

// Attenutation increment tables (verified on real hardware)
array<array<uint8_t, 16>, 64> att_inc_attack =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-0
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-2
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 1-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 1-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 1-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 1-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 2-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 2-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 2-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 2-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 3-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 3-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 3-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 3-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 4-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 4-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 4-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 5-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 5-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 5-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 5-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 6-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 6-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 6-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 6-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 7-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 7-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 7-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 7-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 8-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 8-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 8-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 8-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 9-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 9-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 9-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 9-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 10-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 10-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 10-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 10-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 11-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 11-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 11-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 11-3
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 12-0
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, // 12-1
    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, // 12-2
    1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 12-3
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 13-0
    2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, // 13-1
    2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, // 13-2
    2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, // 13-3
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, // 14-0
    4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 4, // 14-1
    4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, // 14-2
    4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, // 14-3
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, // 15-0
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, // 15-1
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, // 15-2
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, // 15-3
};

array<array<uint8_t, 16>, 64> att_inc_decay =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-0
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-2
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 1-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 1-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 1-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 1-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 2-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 2-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 2-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 2-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 3-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 3-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 3-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 3-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 4-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 4-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 4-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 5-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 5-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 5-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 5-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 6-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 6-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 6-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 6-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 7-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 7-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 7-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 7-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 8-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 8-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 8-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 8-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 9-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 9-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 9-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 9-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 10-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 10-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 10-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 10-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 11-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 11-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 11-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 11-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12-0
    0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, // 12-1
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, // 12-2
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 12-3
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 13-0
    0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, // 13-1
    0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 13-2
    0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13-3
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 14-0
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, // 14-1
    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, // 14-2
    1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 14-3
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 15-0
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 15-1
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 15-2
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 15-3
};

// Table for amplitude LFO calculations (verified on a real YM2413)
// NOTE: each element repeats for 64 cycles
array<uint8_t, 210> am_table = 
{
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,
     2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,
     4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,
     6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,
     8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11,
    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 12, 12, 12, 12, 12,
    12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 
    10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  9,  8,  8,  8,  8,  8,
     8,  8,  8,  7,  7,  7,  7,  7,  7,  7,  7,  6,  6,  6,  6,  6,
     6,  6,  6,  5,  5,  5,  5,  5,  5,  5,  5,  4,  4,  4,  4,  4,
     4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,
     2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,
     0,  0
};

// Table for pitch modulation (derived from emu2413)
array<array<int8_t, 8>, 8> pm_table = 
{
    0, 0, 0, 0, 0,  0,  0,  0, // fnum = 000xxxxxx
    0, 0, 1, 0, 0,  0, -1,  0, // fnum = 001xxxxxx
    0, 1, 2, 1, 0, -1, -2, -1, // fnum = 010xxxxxx
    0, 1, 3, 1, 0, -1, -3, -1, // fnum = 011xxxxxx
    0, 2, 4, 2, 0, -2, -4, -2, // fnum = 100xxxxxx
    0, 2, 5, 2, 0, -2, -5, -2, // fnum = 101xxxxxx
    0, 3, 6, 3, 0, -3, -6, -3, // fnum = 110xxxxxx
    0, 3, 7, 3, 0, -3, -7, -3, // fnum = 111xxxxxx
};